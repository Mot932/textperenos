To add a `progressbar` to your tkinter code, you can use the `ttk.Progressbar` widget from the `tkinter.ttk` module. Here's how you can modify your code to include a simple progress bar:

```python
import tkinter as tk
from tkinter import ttk, colorchooser, filedialog
import analiz

color = ""
file_path = ""

def show_color_picker():
    global color
    color = colorchooser.askcolor(title="Выберите цвет")
    if color[1]:
        print("Выбранный цвет:", color[1])

def select_file():
    global file_path
    file_path = filedialog.askopenfilename(title="Выберите файл")
    if file_path:
        print("Выбранный файл:", file_path)

def run():
    pos_list = []
    if noun_var.get():
        pos_list.append('NOUN')
    if verb_var.get():
        pos_list.append('VERB')

    if file_path:
        # Create a progress bar
        progress = ttk.Progressbar(window, mode='indeterminate')
        progress.grid(row=6, columnspan=2, padx=6, pady=6)
        progress.start()  # Start the progress bar

        def analyze_text():
            analiz.TextAnalyser(
                file_name=file_path,
                pos_list=pos_list,
                chislo=int(entry.get()),
                background=color[1],
                width=int(entry2.get()),
                height=int(entry3.get())
            )
            progress.stop()  # Stop the progress bar when analysis is done

        # Use after() to call the analyze_text() function after a delay
        window.after(100, analyze_text)

    else:
        print("Выберите файл перед запуском анализатора")

window = tk.Tk()
window.title("Анализатор текста 0.6 Beta")

# ... (Your widget creation code)

window.mainloop()
```

In this modified code:

1. We import `ttk` from `tkinter` for the `ttk.Progressbar`.
2. We create a `ttk.Progressbar` widget named `progress` and grid it.
3. Inside the `run` function, we start the progress bar using `progress.start()`.
4. We define a new function `analyze_text` to perform the text analysis.
5. We use `window.after(100, analyze_text)` to call `analyze_text` after a short delay (100 milliseconds) to ensure the progress bar starts smoothly.
6. When the analysis is complete, we stop the progress bar using `progress.stop()`.

This will give you a basic indeterminate progress bar while the text analysis is being performed. Adjust the details of the progress bar appearance and behavior as needed for your application.
